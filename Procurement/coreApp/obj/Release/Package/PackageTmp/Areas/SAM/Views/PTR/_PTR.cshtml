@model coreApp.Areas.SAM.tblARE

@{    
    bool isReadOnly = (bool)ViewBag.uiIsReadOnly;
    bool includeId = (bool)ViewBag.uiIncludeId;
    
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    if (isReadOnly)
    {
        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Id)
            </div>
            <div class="col-md-9">
                <div class="form-control">
                    @Html.DisplayFor(model => model.Id)
                </div>
            </div>
        </div>

                <div class="form-row">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.AREDate)
                    </div>
                    <div class="col-md-9">
                        <div class="form-control">
                            @Html.DisplayFor(model => model.AREDate)
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.PTRNo)
                    </div>
                    <div class="col-md-9">
                        <div class="form-control">
                            @Html.DisplayFor(model => model.PTRNo)
                        </div>
                    </div>
                </div>

                if (FixedSettings.IncludeContractors)
                {
                    <div class="form-row">
                        <div class="col-md-3">
                            From
                        </div>
                        <div class="col-md-9">
                            <div class="form-control">
                                @Html.DisplayFor(model => model._From_Name)
                                @if (Model.From_Type == (int)coreApp.Areas.SAM.Enums.iType.Contractor)
                                {
                                    <span>&nbsp;[Contractor]</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col-md-3">
                            To
                        </div>
                        <div class="col-md-9">
                            <div class="form-control">
                                @Html.DisplayFor(model => model._To_Name)
                                @if (Model.To_Type == (int)coreApp.Areas.SAM.Enums.iType.Contractor)
                                {
                                    <span>&nbsp;[Contractor]</span>
                                }
                            </div>
                        </div>
                    </div>

                    if (Model.To_Type == (int)coreApp.Areas.SAM.Enums.iType.Employee)
                    {
                        <div class="form-row">
                            <div class="col-md-3">
                                Position
                            </div>
                            <div class="col-md-9">
                                <div class="form-control">
                                    @Html.DisplayFor(model => model._To_Position)
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="form-row">
                        <div class="col-md-3">
                            From
                        </div>
                        <div class="col-md-9">
                            <div class="form-control">
                                @Html.DisplayFor(model => model._From_Name)
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col-md-3">
                            To
                        </div>
                        <div class="col-md-9">
                            <div class="form-control">
                                @Html.DisplayFor(model => model._To_Name)
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="col-md-3">
                            Position
                        </div>
                        <div class="col-md-9">
                            <div class="form-control">
                                @Html.DisplayFor(model => model._To_Position)
                            </div>
                        </div>
                    </div>

                }

                <div class="form-row">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.FundCluster)
                    </div>
                    <div class="col-md-9">
                        <div class="form-control">
                            @Html.DisplayFor(model => model.FundCluster)
                        </div>
                    </div>
                </div>
    }
    else
    {
        @Html.HiddenFor(model => model.Id)

        if (includeId)
        {
            <div class="form-row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Id)
                </div>
                <div class="col-md-9">
                    <div class="form-control dimmed">
                        @Html.DisplayFor(model => model.Id)
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.PTRNo)
                </div>
                <div class="col-md-9">
                    <div class="form-control dimmed">
                        @Html.DisplayFor(model => model.PTRNo)
                    </div>
                </div>
            </div>
        }

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.AREDate)
            </div>
            <div class="col-md-9">
                @Html.TextBoxFor(model => model.AREDate, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker" })
            </div>
        </div>

        if (FixedSettings.IncludeContractors)
        {
            <div class="fromtype-ui @(Model.From_Type == (int)coreApp.Areas.SAM.Enums.iType.Employee ? "show-fromtype-employee" : "show-fromtype-contractor")">
                <div class="form-row">
                    <div class="col-md-3">
                        From
                    </div>
                    <div class="col-md-9">
                        <div class="form-control radiobox-inline">
                            <label><input type="radio" name="From_Type" value="0" @(!Model.FromContractor ? "checked" : "") /> Employee</label>&nbsp;
                            <label><input type="radio" name="From_Type" value="1" @(Model.FromContractor ? "checked" : "") /> Contractor</label>
                        </div>
                    </div>
                </div>

                <div class="form-row fromtype fromtype-employee">
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model._FromEmployee, coreApp.Areas.Procurement.SelectItems.getEmployees(), new { @class = "form-control" })
                    </div>
                </div>

                <div class="form-row fromtype fromtype-contractor">
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model._FromContractor, coreApp.Areas.SAM.SelectItems.getContractors(), new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="totype-ui @(Model.To_Type == (int)coreApp.Areas.SAM.Enums.iType.Employee ? "show-totype-employee" : "show-totype-contractor")">
                <div class="form-row">
                    <div class="col-md-3">
                        To
                    </div>
                    <div class="col-md-9">
                        <div class="form-control radiobox-inline">
                            <label><input type="radio" name="To_Type" value="0" @(Model.To_Type == (int)coreApp.Areas.SAM.Enums.iType.Employee ? "checked" : "") /> Employee</label>&nbsp;
                            <label><input type="radio" name="To_Type" value="1" @(Model.To_Type == (int)coreApp.Areas.SAM.Enums.iType.Contractor ? "checked" : "") /> Contractor</label>
                        </div>
                    </div>
                </div>

                <div class="form-row totype totype-employee">
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model._ToEmployee, coreApp.Areas.Procurement.SelectItems.getEmployees(), new { @class = "form-control" })
                    </div>
                </div>

                <div class="form-row totype totype-contractor">
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model._ToContractor, coreApp.Areas.SAM.SelectItems.getContractors(), new { @class = "form-control" })
                    </div>
                </div>
            </div>

        }
        else
        {
            <div class="form-row">
                <div class="col-md-3">
                    From
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.From_Id, coreApp.Areas.Procurement.SelectItems.getEmployees(), new { @class = "form-control" })
                </div>
            </div>

            <div class="form-row">
                <div class="col-md-3">
                    To
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.To_Id, coreApp.Areas.Procurement.SelectItems.getEmployees(), new { @class = "form-control" })
                </div>
            </div>
        }

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.FundCluster)
            </div>
            <div class="col-md-9">
                @Html.TextBoxFor(model => model.FundCluster, new { @class = "form-control" })
            </div>
        </div>
    }
}