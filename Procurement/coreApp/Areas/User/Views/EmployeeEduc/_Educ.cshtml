@model coreApp.DAL.tblEmployee_Educ

@{    
    bool isReadOnly = (bool)ViewBag.uiIsReadOnly;
    bool includeId = (bool)ViewBag.uiIncludeId;

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    if (isReadOnly)
    {
        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.EducId)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.EducId)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.EducLevel_Desc)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.EducLevel_Desc)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.School)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.School)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Degree)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.Degree)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearGraduated)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.YearGraduated)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.UnitsEarned)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @if (Model.UnitsEarned != null)
                    {
                        @Model.UnitsEarned.Value.ToString("#,##0.00")
                    }
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearFrom)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.YearFrom)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearTo)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.YearTo_Desc)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.HonorsReceived)
            </div>
            <div class="col-md-8">
                <div class="form-control">
                    @Html.DisplayFor(model => model.HonorsReceived)
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.OnSeparatePage)
            </div>
            <div class="col-md-9">
                <div class="form-control">
                    @Html.DisplayBooleanFor(model => model.OnSeparatePage)
                </div>
            </div>
        </div>
    }
    else
    {
        @Html.HiddenFor(model => model.EmployeeId)
        @Html.HiddenFor(model => model.EducId)

        if (includeId)
        {
            <div class="form-row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.EducId)
                </div>
                <div class="col-md-8">
                    <div class="form-control dimmed">
                        @Html.DisplayFor(model => model.EducId)
                    </div>
                </div>
            </div>
        }

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.EducLevel)
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(m => m.EducLevel, coreApp.SelectItems.getEducLevel(), new { @class = "form-control" })
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.School)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.School, new { @maxlength = "255", @class = "form-control" })
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Degree)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Degree, new { @class = "form-control" })
            </div>
        </div>

        @*<div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearGraduated)
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(m => m.YearGraduated, coreApp.SelectItems.getYears(), new { @class = "form-control" })
            </div>
        </div>*@

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.UnitsEarned)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.UnitsEarned, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearFrom)
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(m => m.YearFrom, coreApp.SelectItems.getYears(), new { @class = "form-control" })
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.YearTo)
            </div>
            <div class="col-md-8">                
                <div class="input-group">
                    @Html.DropDownListFor(m => m.YearTo, coreApp.SelectItems.getYears(), new { @class = "form-control" })
                    <div class="input-group-addon">
                        @Html.Partial("_Helper_CheckBox", "YearTo_Present", new ViewDataDictionary { { "value", Model.YearTo_Present == true }, { "text", "To Present" } })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.HonorsReceived)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.HonorsReceived, new { @class = "form-control", maxlength = "100" })
            </div>
        </div>

        <div class="form-row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.OnSeparatePage)
            </div>
            <div class="col-md-9">
                @Html.Partial("_Helper_CheckBox", "OnSeparatePage", new ViewDataDictionary { { "value", Model.OnSeparatePage } })
            </div>
        </div>
    }
}
